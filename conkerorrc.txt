// Show number and loading of buffers
add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);

add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);

// Things load in new buffers rather than windows
function load_url_in_new_buffer_really(url, ctx) {
    create_buffer_in_current_window(buffer_creator(content_buffer, $load = url, $configuration = ctx.config), OPEN_NEW_BUFFER);}
url_remoting_fn = load_url_in_new_buffer;

// Open link in new buffer with "d"
interactive("follow-new-buffer", null, function (I) {
    var target = OPEN_NEW_BUFFER;
    var element = yield I.read_browser_object("follow", "Follow", "links", target);
    browser_element_follow(I.buffer, target, element);
});

define_key(content_buffer_normal_keymap, "d", "follow-new-buffer");


// dont use google calendar mode, it breaks shit
page_mode_deactivate(google_calendar_mode);

// My webjumps:
define_webjump("torrentz", "http://www.torrentz.com/search?q=%s");

define_webjump("youtube", "http://www.youtube.com/results?search_query=%s&search_type=");

define_webjump("thesaurus", "http://thesaurus.com/browse/%s");

define_webjump("hoogle", "http://www.haskell.org/hoogle/?hoogle=%s");

define_webjump("matlab", "http://www.mathworks.se/help/search/doccenter/en/R2012b?qdoc=%s&submitsearch=Search");

define_webjump("plazes", "http://plazes.com/search;users?q=%s");

define_webjump("codesearch", "http://google.com/codesearch?q=%s&hl=en&btnG=Search+Code");

define_webjump("stellarwinds", "http://stellarwinds.me/browse.php?search=%s");

define_webjump("books", "http://books.google.com/books?ei=ymiPSe2hCImt-gbIv-mdCw&ct=result&q=%s&btnG=Search+Books");

define_webjump("wordpress", "http://wordpress.org/search/%s");

// Set default download folder
cwd = make_file("/home/klaes/downloads");

// Auto save and load session
require("session.js");
session_auto_save_auto_load = true;
session_auto_save_auto_load_fn = session_auto_save_load_window_current;

// Auto-modes:
xkcd_add_title = true;

// Define number keys to switch buffers
function define_switch_buffer_key (key, buf_num) {
    define_key(default_global_keymap, key,
               function (I) {
                   switch_to_buffer(I.window,
                                    I.window.buffers.get_buffer(buf_num));
               });
}
for (let i = 0; i < 10; ++i) {
    define_switch_buffer_key(String((i+1)%10), i);
}

// Set what program opens pdf in conkeror
external_content_handlers.set("application/pdf", "evince");

// Open external url links in new buffer
url_remoting_fn = load_url_in_new_buffer;

// Undefine q for closing tabs, since I use C-x k anyways
undefine_key(default_global_keymap, "q");


define_key(default_global_keymap, "C-T", "revive-buffer");

var kill_buffer_original = kill_buffer_original || kill_buffer;

var killed_buffer_urls = [];
var killed_buffer_histories = [];


//  remember_killed_buffer
kill_buffer = function (buffer, force) {
    var hist = buffer.web_navigation.sessionHistory;

    if (buffer.display_uri_string && hist) {
        killed_buffer_histories.push(hist);
        killed_buffer_urls.push(buffer.display_uri_string);
    }

    kill_buffer_original(buffer,force);
};

interactive("revive-buffer",
            "Loads url from a previously killed buffer",
            function restore_killed_buffer (I) {
                if (killed_buffer_urls.length !== 0) {
                    var url = yield I.minibuffer.read(
                        $prompt = "Restore killed url:",
                        $completer = new all_word_completer($completions = killed_buffer_urls),
                        $default_completion = killed_buffer_urls[killed_buffer_urls.length - 1],
                        $auto_complete = "url",
                        $auto_complete_initial = true,
                        $auto_complete_delay = 0,
                        $require_match = true);

                    var window = I.window;
                    var creator = buffer_creator(content_buffer);
                    var idx = killed_buffer_urls.indexOf(url);

                    // Create the buffer
                    var buf = creator(window, null);

                    // Recover the history
                    buf.web_navigation.sessionHistory = killed_buffer_histories[idx];

                    // This line may seem redundant, but it's necessary.
                    var original_index = buf.web_navigation.sessionHistory.index;
                    buf.web_navigation.gotoIndex(original_index);

                    // Focus the new tab
                    window.buffers.current = buf;

                    // Remove revived from cemitery
                    killed_buffer_urls.splice(idx,1);
                    killed_buffer_histories.splice(idx,1);
                } else {
                    I.window.minibuffer.message("No killed buffer urls");
                }
            });


// Show some buttons for conkeror navigation
load_paths.unshift("chrome://conkeror-contrib/content/");
require("mode-line-buttons.js");
mode_line_add_buttons(standard_mode_line_buttons, true);

external_content_handlers =
    {
        "*": getenv("EDITOR"),
        text: { "*": getenv("EDITOR") },
        image: { "*": "feh" },
        video: { "*": "mplayer" },
        audio: { "*": "mplayer" },
        application: {
            pdf: "evince",
            postscript: "evince",
            "x-dvi": "evince"
        }
    }
